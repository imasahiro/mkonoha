#define vmop_halt()                          _halt()
#define vmop_exit()                          return
#define vmop_local_start(i0)                 vm_local_new(vm, N(0))
#define vmop_local_end(i0)                   vm_local_delete(vm, N(0))
#define vmop_nmov(i0, i1)                    N (0) = N (1)
#define vmop_nmovx(i0, i1)                   N (0) = NX(1)
#define vmop_xnmov(i0, i1)                   NX(0) = N (1)
#define vmop_xnmovx(i0, i1)                  NX(0) = NX(1)
#define vmop_omov(i0, i1)                    O (0) = O (1)
#define vmop_omovx(i0, i1)                   O (0) = OX(1)
#define vmop_xomov(i0, i1)                   OX(0) = O (1)
#define vmop_xomovx(i0, i1)                  OX(0) = OX(1)
#define vmop_nset(i0, i1)                    N (0) = NC(1)
#define vmop_xnset(i0, i1)                   NX(0) = NC(1)
#define vmop_oset(i0, i1)                    O (0) = OC(1)
#define vmop_xoset(i0, i1)                   OX(0) = OC(1)
#define vmop_new(i0, i1)                     O (0) = new_Object_(C(1))
#define vmop_box(i0, i1)                     O (0) = new_box(C(1), N (2))
#define vmop_unbox(i0, i1)                   N (0) = new_unbox(C(1), O (2))
#define vmop_iadd(i0, i1, i2)                N (0) = N(1) + N(2)
#define vmop_isub(i0, i1, i2)                N (0) = N(1) - N(2)
#define vmop_imul(i0, i1, i2)                N (0) = N(1) * N(2)
#define vmop_idiv(i0, i1, i2)                N (0) = N(1) / N(2)
#define vmop_imod(i0, i1, i2)                N (0) = N(1) % N(2)
#define vmop_icast(i0, i1)                   N (0) = (knh_int_t) F(1)
#define vmop_ieq(i0, i1, i2)                 N (0) = N(1) == N(2)
#define vmop_ine(i0, i1, i2)                 N (0) = N(1) != N(2)
#define vmop_igt(i0, i1, i2)                 N (0) = N(1) >  N(2)
#define vmop_ilt(i0, i1, i2)                 N (0) = N(1) <  N(2)
#define vmop_ige(i0, i1, i2)                 N (0) = N(1) >= N(2)
#define vmop_ile(i0, i1, i2)                 N (0) = N(1) <= N(2)
#define vmop_iin(i0, i1, i2, i3)             N (0) = N(2) <= N(1) && N(1) <= N(3)
#define vmop_inoin(i0, i1, i2, i3)           N (0) = N(1) <= N(2) && N(3) <= N(1)
#define vmop_Jieq(i0, i1, i2)                if (N(1) == N(2)) jmp(P(0))
#define vmop_Jine(i0, i1, i2)                if (N(1) != N(2)) jmp(P(0))
#define vmop_Jigt(i0, i1, i2)                if (N(1) >  N(2)) jmp(P(0))
#define vmop_Jilt(i0, i1, i2)                if (N(1) <  N(2)) jmp(P(0))
#define vmop_Jige(i0, i1, i2)                if (N(1) >= N(2)) jmp(P(0))
#define vmop_Jile(i0, i1, i2)                if (N(1) <= N(2)) jmp(P(0))
#define vmop_Jiin(i0, i1, i2, i3)            if (N(2) <= N(1) && N(1) <= N(3)) jmp(P(0))
#define vmop_Jinoin(i0, i1, i2, i3)          if (N(1) <= N(2) && N(3) <= N(1)) jmp(P(0))
#define vmop_fadd(i0, i1, i2)                F (0) = F(1) + F(2)
#define vmop_fsub(i0, i1, i2)                F (0) = F(1) - F(2)
#define vmop_fmul(i0, i1, i2)                F (0) = F(1) * F(2)
#define vmop_fdiv(i0, i1, i2)                F (0) = F(1) / F(2)
#define vmop_fcast(i0, i1)                   F (0) = (knh_float_t)N(1)
#define vmop_feq(i0, i1, i2)                 F (0) = F(1) == F(2)
#define vmop_fne(i0, i1, i2)                 F (0) = F(1) != F(2)
#define vmop_fgt(i0, i1, i2)                 F (0) = F(1) >  F(2)
#define vmop_flt(i0, i1, i2)                 F (0) = F(1) <  F(2)
#define vmop_fge(i0, i1, i2)                 F (0) = F(1) >= F(2)
#define vmop_fle(i0, i1, i2)                 F (0) = F(1) <= F(2)
#define vmop_fin(i0, i1, i2, i3)             F (0) = F(2) <= F(1) && F(1) <= F(3)
#define vmop_fnoin(i0, i1, i2, i3)           F (0) = F(1) <= F(2) && F(3) <= F(1)
#define vmop_Jfeq(i0, i1, i2)                if (N(1) == N(2)) jmp(P(0))
#define vmop_Jfne(i0, i1, i2)                if (N(1) != N(2)) jmp(P(0))
#define vmop_Jfgt(i0, i1, i2)                if (N(1) >  N(2)) jmp(P(0))
#define vmop_Jflt(i0, i1, i2)                if (N(1) <  N(2)) jmp(P(0))
#define vmop_Jfge(i0, i1, i2)                if (N(1) >= N(2)) jmp(P(0))
#define vmop_Jfle(i0, i1, i2)                if (N(1) <= N(2)) jmp(P(0))
#define vmop_Jfin(i0, i1, i2, i3)            if (N(2) <= N(1) && N(1) <= N(3)) jmp(P(0))
#define vmop_Jfnoin(i0, i1, i2, i3)          if (N(1) <= N(2) && N(3) <= N(1)) jmp(P(0))
#define vmop_call(i0, i1, i2)                MTD(1)->call(vm, MTD(1)->pc);  P(0) = RET(vm)
#define vmop_scall(i0, i1, i2)               ((fvm2)P(2)) (vm, MTD(1)->pc); P(0) = RET(vm)
#define vmop_fcall(i0, i1, i2)               ((fvm)P(2)) (vm); P(0) = RET(vm)
#define vmop_rcall_v(i0, i1, i2)             ((fa1_v)P(1)) ()
#define vmop_rcall_i(i0, i1, i2)             N(0) = ((fa1_i)P(1)) (NARG(0))
#define vmop_rcall_p(i0, i1, i2)             P(0) = ((fa1_p)P(1)) (OARG(0))
#define vmop_rcall_f(i0, i1, i2)             F(0) = ((fa1_f)P(1)) (FARG(0))
#define vmop_jmp(i0)                         jmp(P(0))
#define vmop_cast(i0, i1)                    O (0) = FCAST(0) (P(1), N(1))
#define vmop_ngetidx(i0, i1, i2)             V (0) = Array_get(data,  NA(1), N(2))
#define vmop_ogetidx(i0, i1, i2)             O (0) = Array_get(Object, OA(1), N(2))
#define vmop_nsetidx(i0, i1, i2)             Array_set(data,  NA(1), N(2), V(0))
#define vmop_osetidx(i0, i1, i2)             Array_set(Object, OA(1), N(2), O(0))
#define vmop_thcode_init()                   __thcode_init(THCODE)
#define vmop_unused0(i0)                     FUNC(0) (vm, pc)
#define vmop_unused1(i0)                     FUNC(0) (vm, pc)
#define vmop_unused2(i0)                     FUNC(0) (vm, pc)
#define vmop_unused3(i0)                     FUNC(0) (vm, pc)
#define vmop_unused4(i0)                     FUNC(0) (vm, pc)
#define vmop_unused5(i0)                     FUNC(0) (vm, pc)
#define vmop_unused6(i0)                     FUNC(0) (vm, pc)
#define vmop_unused7(i0)                     FUNC(0) (vm, pc)
